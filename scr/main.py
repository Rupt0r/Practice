import asyncio
import json
import os
from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

import data.secret_data as sd

API_TOKEN = sd.SECRET_TOKEN
ADMIN_ID = sd.SECRET_ADMIN_ID

print(sd.SECRET_TOKEN)

router = Router()
users = set()

def load_models():
    path = "data/models.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

@router.message(Command("start"))
async def cmd_start(message: Message):
    print('log_start: active')
    users.add(message.from_user.id)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ 3D-–∫–∞—Ä—Ç–∞–º –∫–æ—Ä–ø—É—Å–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
                         "–ö–æ–º–∞–Ω–¥—ã: /–∫–æ—Ä–ø—É—Å–∞ /–≥–∞–ª–µ—Ä–µ—è /–Ω–æ–≤–æ—Å—Ç–∏ /—Ä–µ—Å—É—Ä—Å—ã /–ø–æ–º–æ—â—å")
    print('log_start: inactive')

@router.message(Command("–ø–æ–º–æ—â—å"))
async def cmd_help(message: Message):
    print('log_help: active')
    await message.answer("/–∫–æ—Ä–ø—É—Å–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤\n/–≥–∞–ª–µ—Ä–µ—è ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
                         "/–Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞\n/—Ä–µ—Å—É—Ä—Å—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏")
    print('log_help: inactive')

@router.message(Command("–∫–æ—Ä–ø—É—Å–∞"))
async def cmd_corpuses(message: Message):
    print('log_corpuses: active')
    models = load_models()
    if not models:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤.")
        return
    text = "üìç –°–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤:\n"
    for name, data in models.items():
        text += f"üîπ {name}: {data['description']}\n"
    await message.answer(text)
    print('log_corpuses: inactive')

@router.message(Command("–≥–∞–ª–µ—Ä–µ—è"))
async def cmd_gallery(message: Message):
    print('log_gallery: active')
    models = load_models()
    for model in models.values():
        img_path = model.get("image")
        if img_path and os.path.exists(img_path):
            with open(img_path, "rb") as img:
                await message.answer_photo(img, caption=model["description"])
    print('log_gallery: inactive')

@router.message(Command("–Ω–æ–≤–æ—Å—Ç–∏"))
async def cmd_news(message: Message):
    print('log_news: active')
    await message.answer("üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n1. –°–æ–∑–¥–∞–Ω –∫–æ—Ä–ø—É—Å A\n2. –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä–ø—É—Å B\n3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 2–ì–ò–°")
    print('log_news: inactive')

@router.message(Command("—Ä–µ—Å—É—Ä—Å—ã"))
async def cmd_resources(message: Message):
    print('log_resources: active')
    await message.answer("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n- https://2gis.ru\n- https://mospolytech.ru")
    print('log_resources: inactive')

@router.message(Command("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
async def cmd_stats(message: Message):
    print('log_stats: active')
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
    print('log_stats: inactive')

@router.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
async def cmd_add(message: Message):
    print('log_add: active')
    if message.from_user.id != ADMIN_ID:
        return
    args = message.text.replace("/–¥–æ–±–∞–≤–∏—Ç—å", "").strip().split(" | ")
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
        return
    name, desc, img = args
    models = load_models()
    models[name] = {"description": desc, "image": img}
    with open("data/models.json", "w", encoding="utf-8") as f:
        json.dump(models, f, ensure_ascii=False, indent=2)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä–ø—É—Å {name}")
    print('log_add: inactive')

async def main():
    bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    os.makedirs("data", exist_ok=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    print('–Ø –ø–æ–∫–∞–∫–∞–ª')
    asyncio.run(main())
