import asyncio
import json
import logging
import os
from functools import wraps

from aiogram import Bot, Dispatcher, Router, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

import data.secret_data as sd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename="data/bot.log",
    filemode="a",
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)

def log_command(name: str):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            logging.info(f"{name}: active")
            result = await func(*args, **kwargs)
            logging.info(f"{name}: inactive")
            return result
        return wrapper
    return decorator


API_TOKEN = sd.SECRET_TOKEN
ADMIN_ID = sd.SECRET_ADMIN_ID

router = Router()
users = set()


def load_models():
    path = "data/models.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}


@router.message(Command("start"))
@log_command("start")
async def cmd_start(message: Message):
    users.add(message.from_user.id)
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ 3D-–∫–∞—Ä—Ç–∞–º –∫–æ—Ä–ø—É—Å–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /–∫–æ—Ä–ø—É—Å–∞ /–≥–∞–ª–µ—Ä–µ—è /–Ω–æ–≤–æ—Å—Ç–∏ /—Ä–µ—Å—É—Ä—Å—ã /–ø–æ–º–æ—â—å"
    )


@router.message(Command("–ø–æ–º–æ—â—å"))
@log_command("help")
async def cmd_help(message: Message):
    await message.answer(
        "/–∫–æ—Ä–ø—É—Å–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤\n"
        "/–≥–∞–ª–µ—Ä–µ—è ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "/–Ω–æ–≤–æ—Å—Ç–∏ ‚Äî –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–∞\n"
        "/—Ä–µ—Å—É—Ä—Å—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏"
    )


@router.message(Command("–∫–æ—Ä–ø—É—Å–∞"))
@log_command("corpuses")
async def cmd_corpuses(message: Message):
    models = load_models()
    if not models:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–æ–≤.")
        return
    text = "üìç –°–ø–∏—Å–æ–∫ –∫–æ—Ä–ø—É—Å–æ–≤:\n"
    for name, data in models.items():
        text += f"üîπ {name}: {data['description']}\n"
    await message.answer(text)


@router.message(Command("–≥–∞–ª–µ—Ä–µ—è"))
@log_command("gallery")
async def cmd_gallery(message: Message):
    models = load_models()
    for model in models.values():
        img_path = model.get("image")
        if img_path and os.path.exists(img_path):
            with open(img_path, "rb") as img:
                await message.answer_photo(img, caption=model["description"])


@router.message(Command("–Ω–æ–≤–æ—Å—Ç–∏"))
@log_command("news")
async def cmd_news(message: Message):
    await message.answer(
        "üì∞ –ù–æ–≤–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞:\n"
        "1. –°–æ–∑–¥–∞–Ω –∫–æ—Ä–ø—É—Å A\n"
        "2. –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä–ø—É—Å B\n"
        "3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å 2–ì–ò–°"
    )


@router.message(Command("—Ä–µ—Å—É—Ä—Å—ã"))
@log_command("resources")
async def cmd_resources(message: Message):
    await message.answer("üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:\n- https://2gis.ru\n- https://mospolytech.ru")


@router.message(Command("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
@log_command("stats")
async def cmd_stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")


@router.message(Command("–¥–æ–±–∞–≤–∏—Ç—å"))
@log_command("add")
async def cmd_add(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    args = message.text.replace("/–¥–æ–±–∞–≤–∏—Ç—å", "").strip().split(" | ")
    if len(args) != 3:
        await message.answer("–§–æ—Ä–º–∞—Ç: /–¥–æ–±–∞–≤–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ | –û–ø–∏—Å–∞–Ω–∏–µ | –ø—É—Ç—å_–∫_–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é")
        return
    name, desc, img = args
    models = load_models()
    models[name] = {"description": desc, "image": img}
    with open("data/models.json", "w", encoding="utf-8") as f:
        json.dump(models, f, ensure_ascii=False, indent=2)
    await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ—Ä–ø—É—Å {name}")


async def main():
    bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher()
    dp.include_router(router)

    os.makedirs("data", exist_ok=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.info("BOT: active")
    asyncio.run(main())
